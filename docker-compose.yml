volumes:
  kafka-storage:
    driver: local
  emqx-data:
    driver: local
  neo4j-content:
    driver: local

networks:
  basyx:
    driver: bridge
  kafka:
    driver: bridge
  kafka-connect:
    driver: bridge
  neo4j:
    driver: bridge

services:

########### Administration ##########################################################

  portainer:
    image: portainer/portainer-ce:${PORTAINER_VERSION}
    container_name: portainer
    restart: always
    command: --admin-password-file=/run/secrets/portainer-admin-password
    ports: 
      - "8084:9000"
    secrets:
      - portainer-admin-password
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

########### Kafka ###################################################################

  kafka:
    image: confluentinc/cp-kafka:${KAFKA_VERSION}
    hostname: kafka
    container_name: kafka
    ports:
      - "9092:9094"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTER_BROKER://kafka:9092,EXTERNAL://localhost:9094
      KAFKA_INTER_BROKER_LISTENER_NAME: INTER_BROKER
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENERS: INTER_BROKER://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,INTER_BROKER:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_BROKER_ID: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@127.0.0.1:9093
      ALLOW_PLAINTEXT_LISTENER: 'yes'
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_CREATE_TOPICS: "aas-registry:1:1,aas-events:1:1,submodel-registry:1:1,dlq-aas-events:1:1"
      CLUSTER_ID: jmpccZs2RHaYUbZ-LgaIhQ
      KAFKA_LOG_DIRS: /var/lib/kafka/data
      KAFKA_MIN_INSYNC_REPLICAS: 1
      KAFKA_NUM_PARTITIONS: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    # volumes:
    #   - kafka-storage:/var/lib/kafka/data
    networks:
      - kafka

  akhq:
    image: tchiotludo/akhq:${AKHQ_VERSION}
    container_name: akhq
    restart: always
    ports:
      - 8086:8080
    environment:
      AKHQ_CONFIGURATION: |
        akhq:
          connections:
            docker-kafka-server:
              properties:
                bootstrap.servers: "kafka:9092"
    depends_on:
      - kafka
    networks:
      - kafka

# ########### BASYX ###################################################################

  aas-registry:
    image: eclipsebasyx/aas-registry-kafka-mem:${BASYX_V3_VERSION}
    container_name: aas-registry
    restart: always
    ports:
      - "8083:8080"
    environment: 
      KAFKA_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:9092
      BASYX_CORS_ALLOWED_ORIGINS: '*'
      BASYX_CORS_ALLOWED_METHODS: GET,POST,PATCH,DELETE,PUT,OPTIONS,HEAD
    depends_on:
      - kafka
    networks:
      - basyx
      # - mongodb
      - kafka

  submodel-registry:
    image:  eclipsebasyx/submodel-registry-kafka-mem:${BASYX_V3_VERSION}
    container_name: submodel-registry
    restart: always
    ports:
      - 8082:8080
    environment:
      KAFKA_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:9092
      BASYX_CORS_ALLOWED_ORIGINS: '*'
      BASYX_CORS_ALLOWED_METHODS: GET,POST,PATCH,DELETE,PUT,OPTIONS,HEAD
    depends_on:
      - kafka
    networks:
      - basyx
      # - mongodb
      - kafka

  aas-environment:
    image: dfkibasys/aas-environment:kafka
    container_name: aas-environment
    restart: always
    ports:
      - 8081:8081
    environment:
      BASYX_FEATURE_KAFKA_ENABLED: true
      SPRING_KAFKA_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:9092
      BASYX_AASREPOSITORY_FEATURE_REGISTRYINTEGRATION: http://aas-registry:8080
      BASYX_SUBMODELREPOSITORY_FEATURE_REGISTRYINTEGRATION: http://submodel-registry:8080
      BASYX_AASREPOSITORY_FEATURE_AASXUPLOAD_ENABLED: "true"   
      BASYX_CORS_ALLOWED_ORIGINS: '*'
      BASYX_ENVIRONMENT: file:/application/files/aasx/
      BASYX_CORS_ALLOWED_METHODS: GET,POST,PATCH,DELETE,PUT,OPTIONS,HEAD
      BASYX_EXTERNALURL: http://localhost:8081,http://aas-environment:8081
    volumes:
      # AASX
#      - ./aasx:/application/files/aasx
      - ./aasx/Cab_A_Blue_2.aasx:/application/files/aasx/Cab_A_Blue_2.aasx
#      - ./aasx/ExampleV3.aasx:/application/files/aasx/ExampleV3.aasx
#      - ./aasx/MRK40_Lab_Instance.aasx:/application/files/aasx/MRK40_Lab_Instance.aasx
      - ./aasx/Semitrailer_Truck.aasx:/application/files/aasx/Semitrailer_Truck.aasx
#      - ./aasx/T4TTruckFrame.aasx:/application/files/aasx/T4TTruckFrame.aasx
#      - ./aasx/Twinficient_Maxima2_Instance.aasx:/application/files/aasx/Twinficient_Maxima2_Instance.aasx
#      - ./aasx/Twinficient_Maxima2_Type.aasx:/application/files/aasx/Twinficient_Maxima2_Type.aasx
      - ./aasx/WorkpieceCarrier_A.aasx:/application/files/aasx/WorkpieceCarrier_A.aasx
      # JSON
#      - ./aasx/Semitrailer_afterProcess.json:/application/files/aasx/Semitrailer_afterProcess.json
#      - ./aasx/Semitrailer_truck_afterProcess.json:/application/files/aasx/Semitrailer_truck_afterProcess.json
#      - ./aasx/WST_A_1.json:/application/files/aasx/WST_A_1 2.json
#      - ./aasx/WST_A_5.json:/application/files/aasx/WST_A_5.json
#      - ./aasx/WST_B_6.json:/application/files/aasx/WST_B_6.json
    depends_on:
      aas-registry:
        condition: service_healthy
      submodel-registry:
        condition: service_healthy
    networks:
      - basyx
      # - mongodb
      - kafka

  aas-gui:
    image: eclipsebasyx/aas-gui:${AAS_WEBUI_VERSION}
    container_name: aas-gui
    ports:
      - 8099:3000
    environment:
      CHOKIDAR_USEPOLLING: "true"
      AAS_REGISTRY_PATH: http://localhost:8083
      SUBMODEL_REGISTRY_PATH: http://localhost:8082
      AAS_REPO_PATH: http://localhost:8081/shells
      SUBMODEL_REPO_PATH: http://localhost:8081/submodels
      CD_REPO_PATH: http://localhost:8081/concept-descriptions
    networks:
      - basyx
    depends_on:
      aas-registry:
        condition: service_healthy
      submodel-registry:
        condition: service_healthy    
      aas-environment:
        condition: service_healthy

########### Neo4j ###################################################################
  neo4j:
    image: neo4j:5.23.0-community-bullseye
    container_name: neo4j
    restart: always
    ports:
      - "7474:7474" # Browser interface
      - "7687:7687" # Bolt protocol
    environment:
      NEO4J_AUTH: none
    networks:
      - neo4j
    healthcheck:
      test: ["CMD", "cypher-shell", "RETURN 1"] 
      interval: 30s
      start_period: 8s
      timeout: 10s
      retries: 5

########### Kafka Connect ###########################################################

  kafka-connect:
    image: dfkibasys/aas-neo4j-kafka-connect-plugin:7.7.1-${KAFKA_CONNECT_PLUGIN_VERSION}
    container_name: kafka-connect
    build:
      context: kafka-connect
    pull_policy: never
    ports:
      - "8085:8083"
    environment: 
      CONNECT_BOOTSTRAP_SERVERS: "kafka:9092"     
      CONNECT_REST_ADVERTISED_HOST_NAME: "kafka-connect"            
      CONNECT_LOG4J_LOGGERS: "org.eclipse.basyx.kafka.connect.neo4j=DEBUG,org.apache.kafka.connect=INFO,org.apache.kafka.connect.runtime=INFO,io.pebbletemplates.pebble=TRACE"    
      BASYX_AAS_REPO_URL: http://aas-environment:8081
      BASYX_NEO4J_TARGET_URL: http://neo4j:7474/db/neo4j/tx/commit 
#     BASYX_TEMPLATE_LOCATION: /home/appuser/templates
#     BASYX_CREATE_INDEX_PATH: /etc/basyx/create-index-body.json
    networks:
      - neo4j
      - kafka
      - kafka-connect
    depends_on:
      kafka: 
        condition: service_started
      neo4j: 
        condition: service_healthy
    volumes:
      # not realy needed but the user of this plugin can just update the templates and connect plugin and override the logik
      - ./kafka-connect/java/templates:/home/appuser/templates
      - ./kafka-connect/config/http-connector.json:/etc/kafka-connect/config/neo4j-connector.json
    
  kafka-connect-ui:
    container_name: kafka-connect-ui
    image: landoop/kafka-connect-ui:0.9.7
    ports:
      - "8094:8000"
    environment:
      CONNECT_URL: "http://kafka-connect:8083" 
    networks:
      - kafka-connect
    depends_on:
      kafka-connect:
        condition: service_healthy

secrets:
  portainer-admin-password:
    environment: PORTAINER_ADMIN_PASSWORD
