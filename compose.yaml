networks:
  basyx:
    driver: bridge
  kafka:
    driver: bridge
  kafka-connect:
    driver: bridge
  neo4j:
    driver: bridge

services:


########### Kafka ###################################################################

  kafka:
    image: confluentinc/cp-kafka:${KAFKA_VERSION}
    hostname: kafka
    container_name: kafka
    ports:
      - "9093:9093"   # Für externe Clients (EXTERNAL)
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTER_BROKER://kafka:9094,PLAINTEXT://kafka:9092,EXTERNAL://localhost:9093
      KAFKA_INTER_BROKER_LISTENER_NAME: INTER_BROKER
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      # Definierte Listener, die Kafka tatsächlich bindet:
      KAFKA_LISTENERS: INTER_BROKER://:9094,CONTROLLER://:9095,PLAINTEXT://:9092,EXTERNAL://:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,INTER_BROKER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_BROKER_ID: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9095
      ALLOW_PLAINTEXT_LISTENER: 'yes'
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      CLUSTER_ID: jmpccZs2RHaYUbZ-LgaIhQ
      KAFKA_LOG_DIRS: /var/lib/kafka/data
      KAFKA_MIN_INSYNC_REPLICAS: 1
      KAFKA_NUM_PARTITIONS: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    healthcheck:
      test: ["CMD", "bash", "-c", "echo > /dev/tcp/kafka/9092"]
      interval: 5s
      timeout: 10s
      retries: 10
      start_period: 15s
    networks:
      - kafka

# ########### BASYX ###################################################################

  aas-registry:
    image: eclipsebasyx/aas-registry-log-mem:${BASYX_V3_VERSION}

    container_name: aas-registry
    restart: always
    ports:
      - "8083:8080"
    environment: 
      KAFKA_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:9092
      BASYX_CORS_ALLOWED_ORIGINS: '*'
      BASYX_CORS_ALLOWED_METHODS: GET,POST,PATCH,DELETE,PUT,OPTIONS,HEAD
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - basyx
      - kafka

  submodel-registry:
    image:  eclipsebasyx/submodel-registry-log-mem:${BASYX_V3_VERSION}
    container_name: submodel-registry
    restart: always
    ports:
      - 8082:8080
    environment:
      KAFKA_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:9092
      BASYX_CORS_ALLOWED_ORIGINS: '*'
      BASYX_CORS_ALLOWED_METHODS: GET,POST,PATCH,DELETE,PUT,OPTIONS,HEAD
      SPRING_DATA_MONGODB_URI: ${MONGODB_URI}
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - basyx
      - kafka


  aas-discovery:
    image: eclipsebasyx/aas-discovery:${BASYX_V3_VERSION}
    container_name: aas-discovery
    restart: always
    ports:
      - "9100:8081"
    environment:
      BASYX_CORS_ALLOWED_ORIGINS: '*'
      BASYX_CORS_ALLOWED_METHODS: GET,POST,PATCH,DELETE,PUT,OPTIONS,HEAD
    networks:
      - basyx

  aas-environment:
    #image: eclipsebasyx/aas-environment:${BASYX_V3_VERSION}
    image: dfkibasys/aas-environment:kafka
    container_name: aas-environment
    restart: always
    ports:
      - 8081:8081
    environment:
      BASYX_FEATURE_KAFKA_ENABLED: true
      BASYX_AASREPOSITORY_FEATURE_DISCOVERYINTEGRATION: http://aas-discovery:8081
      SPRING_KAFKA_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:9092
      BASYX_AASREPOSITORY_FEATURE_REGISTRYINTEGRATION: http://aas-registry:8080
      BASYX_SUBMODELREPOSITORY_FEATURE_REGISTRYINTEGRATION: http://submodel-registry:8080
      BASYX_AASREPOSITORY_FEATURE_AASXUPLOAD_ENABLED: "true"   
      BASYX_CORS_ALLOWED_ORIGINS: '*'
    #  BASYX_ENVIRONMENT: file:/application/files/aasx/
      BASYX_CORS_ALLOWED_METHODS: GET,POST,PATCH,DELETE,PUT,OPTIONS,HEAD
      BASYX_EXTERNALURL: http://localhost:8081,http://aas-environment:8081



    volumes: 
    - ./aasx/mir100_10000000_aas.aasx:/application/files/aasx/mir100_10000000_aas.aasx
    - ./aasx/mir100_10000001_aas.aasx:/application/files/aasx/mir100_10000001_aas.aasx
    - ./aasx/mir100_10000002_aas.aasx:/application/files/aasx/mir100_10000002_aas.aasx
    - ./aasx/mir100_10000003_aas.aasx:/application/files/aasx/mir100_10000003_aas.aasx
    - ./aasx/mir100_10000004_aas.aasx:/application/files/aasx/mir100_10000004_aas.aasx
    - ./aasx/mir100_10000005_aas.aasx:/application/files/aasx/mir100_10000005_aas.aasx
      # AASX
#      - ./aasx:/application/files/aasx
#      - ./aasx/Cab_A_Blue_2.aasx:/application/files/aasx/Cab_A_Blue_2.aasx
#      - ./aasx/ExampleV3.aasx:/application/files/aasx/ExampleV3.aasx
#      - ./aasx/MRK40_Lab_Instance.aasx:/application/files/aasx/MRK40_Lab_Instance.aasx
#      - ./aasx/Semitrailer_Truck.aasx:/application/files/aasx/Semitrailer_Truck.aasx
#      - ./aasx/T4TTruckFrame.aasx:/application/files/aasx/T4TTruckFrame.aasx
#      - ./aasx/Twinficient_Maxima2_Instance.aasx:/application/files/aasx/Twinficient_Maxima2_Instance.aasx
#      - ./aasx/Twinficient_Maxima2_Type.aasx:/application/files/aasx/Twinficient_Maxima2_Type.aasx
#      - ./aasx/WorkpieceCarrier_A.aasx:/application/files/aasx/WorkpieceCarrier_A.aasx

    #  - ./kalzip/:/application/files/aasx/
    #- ./lab/:/application/files/aasx/


    # - ./aasx/Semitrailer.aasx:/application/files/aasx/Semitrailer.aasx
    # - ./aasx/Semitrailer_truck.aasx:/application/files/aasx/Semitrailer_truck.aasx
    # - ./aasx/WST_A_1.aasx:/application/files/aasx/WST_A_1.aasx
    # - ./aasx/WST_A_5.aasx:/application/files/aasx/WST_A_5.aasx
    # - ./aasx/WST_B_6.aasx:/application/files/aasx/WST_B_6.aasx


      # - ./aasx/Semitrailer_afterProcess.aasx:/application/files/aasx/Semitrailer_afterProcess.aasx
      # - ./aasx/Semitrailer_truck_afterProcess.aasx:/application/files/aasx/Semitrailer_truck_afterProcess.aasx
      # - ./aasx/WST_A_1 1.aasx:/application/files/aasx/WST_A_1 1.aasx
      # - ./aasx/WST_A_5.aasx:/application/files/aasx/WST_A_5.aasx
      # - ./aasx/WST_B_6.aasx:/application/files/aasx/WST_B_6.aasx
    depends_on:
      aas-registry:
        condition: service_healthy
      submodel-registry:
        condition: service_healthy
      aas-discovery:
        condition: service_healthy
    networks:
      - basyx
      - kafka

########### Neo4j ###################################################################
  neo4j:
    image: neo4j:5.23.0-community-bullseye
    container_name: neo4j
    restart: always
    ports:
      - "7474:7474" # Browser interface
      - "7687:7687" # Bolt protocol
    environment:
      NEO4J_AUTH: none
      NEO4J_dbms_memory_heap_max__size: 8G
      NEO4J_dbms_memory_pagecache_size: 4G
    networks:
      - neo4j
    healthcheck:
      test: ["CMD", "cypher-shell", "RETURN 1"] 
      interval: 30s
      start_period: 8s
      timeout: 10s
      retries: 5

########### Kafka Connect ###########################################################

  kafka-connect:
    image: dfkibasys/aas-neo4j-kafka-connect-plugin:7.7.1-${KAFKA_CONNECT_PLUGIN_VERSION}
    container_name: kafka-connect
    build:
      context: kafka-connect
    pull_policy: never
    ports:
      - "8085:8083"
    environment: 
      # CONNECT_CONSUMER_INTERCEPTOR_CLASSES: "de.dfki.cos.aas2graph.kafka.PollLatencyInterceptor"
      CONNECT_BOOTSTRAP_SERVERS: "kafka:9092"     
      CONNECT_REST_ADVERTISED_HOST_NAME: "kafka-connect"            
      CONNECT_LOG4J_LOGGERS: "de.dfki.cos=INFO,org.apache.kafka.connect=ERROR,org.apache.kafka.connect.runtime=WARN,io.pebbletemplates.pebble=ERROR"    
      BASYX_AAS_REPO_URL: http://localhost:8081
      BASYX_NEO4J_TARGET_URL: http://neo4j:7474/db/neo4j/tx/commit

      CONNECT_CONSUMER_POLL_INTERVAL_MS: "100"
      CONNECT_CONSUMER_FETCH_MAX_WAIT_MS: "50"
      CONNECT_CONSUMER_FETCH_MIN_BYTES: "1"
      CONNECT_CONSUMER_MAX_POLL_RECORDS: "500"
      CONNECT_CONSUMER_OVERRIDE_SESSION_TIMEOUT:MS: "30000"
      CONNECT_CONSUMER_OVERRIDE_MAX_POLL_INTERVAL_MS:  "600000"
      CONNECT_CONSUMER_OVERRIDE_HEARTBEAT_INTERVAL_MS:  "3000"

    networks:
      - neo4j
      - kafka
      - kafka-connect
    depends_on:
      kafka: 
        condition: service_started
      neo4j: 
        condition: service_healthy
    volumes:
      # not realy needed but the user of this plugin can just update the templates and connect plugin and override the logik
      - ./kafka-connect/java/templates:/home/appuser/templates
      - ./kafka-connect/config/http-connector.json:/etc/kafka-connect/config/neo4j-connector.json
      - ./kafka-connect/scripts/entrypoint.sh:/etc/basyx/entrypoint.sh

secrets:
  portainer-admin-password:
    environment: PORTAINER_ADMIN_PASSWORD
